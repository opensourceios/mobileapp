﻿<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#>using Toggl.Multivac.Models;

namespace Toggl.Foundation.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IBaseModel") continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);

        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    internal partial class {className}");
        WriteLine( "    {");
        WriteLine($"        private {className}({interfaceName} entity, bool isDirty)");
        WriteLine( "        {");
        WriteLine( "            Id = entity.Id;");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var trimmedLine = line.Trim();
            var indexOfPropName = trimmedLine.IndexOf(" ") + 1;
            var propName = trimmedLine.Substring(indexOfPropName, trimmedLine.Length - 9 - indexOfPropName);

            WriteLine($"            {propName} = entity.{propName};");
        }

        WriteLine( "            IsDirty = isDirty;");
        WriteLine( "        }\n");
        WriteLine($"        public static {className} Clean({interfaceName} entity)");
        WriteLine($"            => new {className}(entity, false);\n");
        WriteLine($"        public static {className} Dirty({interfaceName} entity)");
        WriteLine($"            => new {className}(entity, true);");
        WriteLine( "    }");

        isFirstClass = false;
    }
#>}